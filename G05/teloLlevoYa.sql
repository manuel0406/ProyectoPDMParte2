            -- Tabla: ACCESOUSUARIO
CREATE TABLE ACCESOUSUARIO (
   IDOPCION INTEGER,
   IDUSUARIO INTEGER,
   FOREIGN KEY (IDOPCION) REFERENCES OPCIONCRUD(IDOPCION),
   FOREIGN KEY (IDUSUARIO) REFERENCES USUARIO(IDUSUARIO)
);

-- Tabla: ADMINITRADOR
CREATE TABLE ADMINITRADOR (
   IDADMINITRADOR INTEGER PRIMARY KEY,
   IDNEGOCIO INTEGER,
   NOMBREADMIN VARCHAR(30),
   APELLIDOSADMIN VARCHAR(30),
   FECHANACIMIENTO DATE,
   FOREIGN KEY (IDNEGOCIO) REFERENCES NEGOCIO(IDNEGOCIO)
);

-- Tabla: CLIENTE
CREATE TABLE CLIENTE (
   IDCLIENTE INTEGER PRIMARY KEY,
   NOMBRECLIENTE VARCHAR(30),
   APELLIDOSCLIENTE VARCHAR(30),
   FECHANACIMIENTOC DATE
);

-- Tabla: DEPARTAMENTO
CREATE TABLE DEPARTAMENTO (
   IDDEPARTAMENTO INTEGER PRIMARY KEY,
   NOMBREDEPARTAMENTO VARCHAR(30)
);

-- Tabla: DETALLEPEDIDO
CREATE TABLE DETALLEPEDIDO (
   IDDETALLEPEDIDO INTEGER PRIMARY KEY,
   IDPEDIDO INTEGER,
   IDRESERVACION INTEGER,
   IDPRODUCTO INTEGER,
   CANTIDADDETALLE INTEGER,
   SUBTOTAL FLOAT,
   FOREIGN KEY (IDPEDIDO) REFERENCES PEDIDO(IDPEDIDO),
   FOREIGN KEY (IDRESERVACION) REFERENCES RESERVACION(IDRESERVACION)
);

-- Tabla: DISTRITO
CREATE TABLE DISTRITO (
   IDDISTRITO INTEGER PRIMARY KEY,
   IDMUNICIPIO INTEGER,
   NOMBREDISTRITO VARCHAR(30),
   FOREIGN KEY (IDMUNICIPIO) REFERENCES MUNICIPIO(IDMUNICIPIO)
);

-- Tabla: ESTADODEORDEN
CREATE TABLE ESTADODEORDEN (
   IDESTADO INTEGER PRIMARY KEY,
   TIPOESTADO VARCHAR(10)
);

-- Tabla: FACTURA
CREATE TABLE FACTURA (
   IDFACTURA INTEGER PRIMARY KEY,
   IDPAGO INTEGER,
   TOTALPAGADO FLOAT,
   FECHAEMISION DATE,
   FOREIGN KEY (IDPAGO) REFERENCES METODOPAGO(IDPAGO)
);

-- Tabla: METODOPAGO
CREATE TABLE METODOPAGO (
   IDPAGO INTEGER PRIMARY KEY,
   TIPOPAGO VARCHAR(10)
);

-- Tabla: MUNICIPIO
CREATE TABLE MUNICIPIO (
   IDMUNICIPIO INTEGER PRIMARY KEY,
   IDDEPARTAMENTO INTEGER,
   NOMBREMUNICIPIO VARCHAR(30),
   FOREIGN KEY (IDDEPARTAMENTO) REFERENCES DEPARTAMENTO(IDDEPARTAMENTO)
);

-- Tabla: NEGOCIO
CREATE TABLE NEGOCIO (
   IDNEGOCIO INTEGER PRIMARY KEY,
   IDUBICACION INTEGER,
   NOMBRENEGOCIO VARCHAR(10),
   TELEFONONEGOCIO VARCHAR(10),
   HORARIOATENCION DATE,
   FOREIGN KEY (IDUBICACION) REFERENCES UBICACION(IDUBICACION)
);

-- Tabla: OPCIONCRUD
CREATE TABLE OPCIONCRUD (
   IDOPCION INTEGER PRIMARY KEY,
   DESOPCION VARCHAR(30),
   NUMCRUD INTEGER
);

-- Tabla: PEDIDO
CREATE TABLE PEDIDO (
   IDPEDIDO INTEGER PRIMARY KEY,
   IDUBICACION INTEGER,
   IDESTADO INTEGER,
   IDFACTURA INTEGER,
   IDREPARTIDOR INTEGER,
   IDCLIENTE INTEGER,
   TOTALAPAGAR FLOAT,
   TIEMPOESTIMADO VARCHAR(10),
   FECHAPEDIDO DATE,
   FECHAENTREGAP DATE,
   DESCRIPCIONORDEN VARCHAR(30),
   FOREIGN KEY (IDUBICACION) REFERENCES UBICACION(IDUBICACION),
   FOREIGN KEY (IDREPARTIDOR) REFERENCES REPARTIDOR(IDREPARTIDOR),
   FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE),
   FOREIGN KEY (IDESTADO) REFERENCES ESTADODEORDEN(IDESTADO),
   FOREIGN KEY (IDFACTURA) REFERENCES FACTURA(IDFACTURA)
);

-- Tabla: PRODUCTO
CREATE TABLE PRODUCTO (
   IDPRODUCTO INTEGER PRIMARY KEY,
   IDNEGOCIO INTEGER,
   NOMBREPRODUCTO VARCHAR(10),
   TIPOPRODUCTO VARCHAR(10),
   DESCRIPCIONPRODUCTO VARCHAR(20),
   PRECIOPRODUCTO FLOAT(10),
   EXISTENCIAPRODUCTO BOOLEAN,
   FOREIGN KEY (IDNEGOCIO) REFERENCES NEGOCIO(IDNEGOCIO)
);
-- Tabla: REPARTIDOR
CREATE TABLE REPARTIDOR (
   IDREPARTIDOR INTEGER PRIMARY KEY,
   NOMBREREPARTIDOR VARCHAR(30),
   APELLIDOREPARTIDOR VARCHAR(30),
   FECHANACIMIENTOR DATE
);

-- Tabla: RESERVACION
CREATE TABLE RESERVACION (
   IDRESERVACION INTEGER PRIMARY KEY,
   IDCLIENTE INTEGER,
   DESCRIPCIONRESERVACION VARCHAR(30),
   ANTICIPORESERVACION FLOAT,
   MONTOPENDIENTE FLOAT,
   FECHAENTREGAR DATE,
   TOTALRESERVACION FLOAT,
   FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE)
);

-- Tabla: SE_ENCUENTRA_
CREATE TABLE SE_ENCUENTRA_ (
   IDUBICACION INTEGER NOT NULL,
   IDCLIENTE INTEGER NOT NULL,
   PRIMARY KEY (IDUBICACION, IDCLIENTE),
   FOREIGN KEY (IDUBICACION) REFERENCES UBICACION(IDUBICACION),
   FOREIGN KEY (IDCLIENTE) REFERENCES CLIENTE(IDCLIENTE)
);

-- Tabla: UBICACION
CREATE TABLE UBICACION (
   IDUBICACION INTEGER PRIMARY KEY,
   IDDISTRITO INTEGER,
   DESCRIPCIONUBICACION VARCHAR(20),
   FOREIGN KEY (IDDISTRITO) REFERENCES DISTRITO(IDDISTRITO)
);

-- Tabla: USUARIO
CREATE TABLE USUARIO (
   IDUSUARIO INTEGER PRIMARY KEY,
   NOMUSUARIO VARCHAR(30),
   CLAVE CHAR(5)
);


-- Trigger para ACCESOUSUARIO
CREATE TRIGGER fk_accesous_opcioncrud
BEFORE INSERT ON ACCESOUSUARIO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDOPCION FROM OPCIONCRUD WHERE IDOPCION = NEW.IDOPCION) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDOPCION no existente en OPCIONCRUD')
    END;
END;

CREATE TRIGGER fk_accesous_usuario
BEFORE INSERT ON ACCESOUSUARIO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDUSUARIO FROM USUARIO WHERE IDUSUARIO = NEW.IDUSUARIO) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDUSUARIO no existente en USUARIO')
    END;
END;

-- Trigger para ADMINITRADOR
CREATE TRIGGER fk_adminit_administr_negocio
BEFORE INSERT ON ADMINITRADOR
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDNEGOCIO FROM NEGOCIO WHERE IDNEGOCIO = NEW.IDNEGOCIO) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDNEGOCIO no existente en NEGOCIO')
    END;
END;

-- Trigger para DETALLEPEDIDO
CREATE TRIGGER fk_detallep_contiene_pedido
BEFORE INSERT ON DETALLEPEDIDO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDPEDIDO FROM PEDIDO WHERE IDPEDIDO = NEW.IDPEDIDO) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDPEDIDO no existente en PEDIDO')
    END;
END;

CREATE TRIGGER fk_detallep_posee_reservac
BEFORE INSERT ON DETALLEPEDIDO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDRESERVACION FROM RESERVACION WHERE IDRESERVACION = NEW.IDRESERVACION) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDRESERVACION no existente en RESERVACION')
    END;
END;

-- Trigger para DISTRITO
CREATE TRIGGER fk_distrito_engloba_municipi
BEFORE INSERT ON DISTRITO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDMUNICIPIO FROM MUNICIPIO WHERE IDMUNICIPIO = NEW.IDMUNICIPIO) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDMUNICIPIO no existente en MUNICIPIO')
    END;
END;

-- Trigger para FACTURA
CREATE TRIGGER fk_factura_realiza_metodopa
BEFORE INSERT ON FACTURA
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDPAGO FROM METODOPAGO WHERE IDPAGO = NEW.IDPAGO) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDPAGO no existente en METODOPAGO')
    END;
END;

-- Trigger para MUNICIPIO
CREATE TRIGGER fk_municipi_incluye_departam
BEFORE INSERT ON MUNICIPIO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDDEPARTAMENTO FROM DEPARTAMENTO WHERE IDDEPARTAMENTO = NEW.IDDEPARTAMENTO) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDDEPARTAMENTO no existente en DEPARTAMENTO')
    END;
END;

-- Trigger para NEGOCIO
CREATE TRIGGER fk_negocio_se_encuen_ubicacio
BEFORE INSERT ON NEGOCIO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDUBICACION FROM UBICACION WHERE IDUBICACION = NEW.IDUBICACION) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDUBICACION no existente en UBICACION')
    END;
END;

-- Trigger para PEDIDO
CREATE TRIGGER fk_pedido_destino_ubicacio
BEFORE INSERT ON PEDIDO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDUBICACION FROM UBICACION WHERE IDUBICACION = NEW.IDUBICACION) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDUBICACION no existente en UBICACION')
    END;
END;

CREATE TRIGGER fk_pedido_entrega_repartid
BEFORE INSERT ON PEDIDO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDREPARTIDOR FROM REPARTIDOR WHERE IDREPARTIDOR = NEW.IDREPARTIDOR) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDREPARTIDOR no existente en REPARTIDOR')
    END;
END;

CREATE TRIGGER fk_pedido_genera_factura
BEFORE INSERT ON PEDIDO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDFACTURA FROM FACTURA WHERE IDFACTURA = NEW.IDFACTURA) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDFACTURA no existente en FACTURA')
    END;
END;

CREATE TRIGGER fk_pedido_hace_cliente
BEFORE INSERT ON PEDIDO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDCLIENTE FROM CLIENTE WHERE IDCLIENTE = NEW.IDCLIENTE) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDCLIENTE no existente en CLIENTE')
    END;
END;

CREATE TRIGGER fk_pedido_tiene_estadode
BEFORE INSERT ON PEDIDO
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDESTADO FROM ESTADODEORDEN WHERE IDESTADO = NEW.IDESTADO) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDESTADO no existente en ESTADODEORDEN')
    END;
END;

-- Trigger para RESERVACION
CREATE TRIGGER fk_reservac_realiza_u_cliente
BEFORE INSERT ON RESERVACION
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDCLIENTE FROM CLIENTE WHERE IDCLIENTE = NEW.IDCLIENTE) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDCLIENTE no existente en CLIENTE')
    END;
END;

-- Trigger para SE_ENCUENTRA_
CREATE TRIGGER fk_se_encue_se_encuen_ubicacio
BEFORE INSERT ON SE_ENCUENTRA_
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDUBICACION FROM UBICACION WHERE IDUBICACION = NEW.IDUBICACION) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDUBICACION no existente en UBICACION')
    END;
END;

CREATE TRIGGER fk_se_encue_se_encuen_cliente
BEFORE INSERT ON SE_ENCUENTRA_
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDCLIENTE FROM CLIENTE WHERE IDCLIENTE = NEW.IDCLIENTE) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDCLIENTE no existente en CLIENTE')
    END;
END;

-- Trigger para UBICACION
CREATE TRIGGER fk_ubicacio_encierra_distrito
BEFORE INSERT ON UBICACION
FOR EACH ROW
BEGIN
    SELECT CASE WHEN ((SELECT IDDISTRITO FROM DISTRITO WHERE IDDISTRITO = NEW.IDDISTRITO) IS NULL)
    THEN RAISE(ABORT, 'Error: Intento de inserción con IDDISTRITO no existente en DISTRITO')
    END;
END;

-- Trigger para asegurar que el ID de negocio en PRODUCTO existe en la tabla NEGOCIO
CREATE TRIGGER fk_producto_negocio
BEFORE INSERT ON PRODUCTO
FOR EACH ROW
BEGIN
    SELECT CASE
        WHEN ((SELECT IDNEGOCIO FROM NEGOCIO WHERE IDNEGOCIO = NEW.IDNEGOCIO) IS NULL)
        THEN RAISE(ABORT, 'El ID de negocio no existe en la tabla NEGOCIO')
    END;
END;

-- Trigger para asegurar que el ID de negocio en PRODUCTO existe en la tabla NEGOCIO
CREATE TRIGGER fk_producto_negocio_update
BEFORE UPDATE OF IDNEGOCIO ON PRODUCTO
FOR EACH ROW
BEGIN
    SELECT CASE
        WHEN ((SELECT IDNEGOCIO FROM NEGOCIO WHERE IDNEGOCIO = NEW.IDNEGOCIO) IS NULL)
        THEN RAISE(ABORT, 'El ID de negocio no existe en la tabla NEGOCIO')
    END;
END;